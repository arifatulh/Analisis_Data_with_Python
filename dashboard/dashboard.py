# -*- coding: utf-8 -*-
"""dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKm7_kftcmeVihBkx8sSVCSoT-kindpT
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency

sns.set(style='dark')

st.markdown(
    """
    Hello, C - Level !
    """
)
st.header("Brazilian E-Commerce Dashboard")

# Add a sidebar
st.sidebar.header("Conclusion")
st.sidebar.markdown("""
1. 10 produk dengan jumlah penjualan terbanyak dalam periode 2016-2018, yaitu: bed_bath_table, furniture_decor,health_beauty, sports_leisure, computers_accessories, housewares, watches_gifts, garden_tools,telephony, auto.
 Produk terlaris didominasi produk rumah tangga dan dekorasi. Selain itu, health_beauty dan sports_leisure juga memiliki permintaan tinggi.

2. 10 Kota dan state yang memiliki pelanggan terbanyak pada 2016-2018, yaitu: Sao Paulo, Rio de Janeiro, Belo Horizonte, Brasilia, Curitiba, Campinas, Porto Alegre, Salvador, Guarulhos, Sao Bernardo do Campo

3. Tren jumlah transaksi dan total penjualan dari tahun 2016 hingga 2018:
- Tren transaksi penjualan terjadi pertumbuhan signifikan sejak 2017, mencapai puncaknya pada akhir 2017, dengan puncak tertinggi pada bulan November 2017.
- Tren total penjualan(revenue) menunjukkan pertumbuhan stabil hingga di akhir 2017, puncak pada bulan November 2017.

4. Penjual dengan total revenue tertinggi selama 2016-2018, berada di daerah guariba city, State of Sao Paulo dengan seller_id '4869f7a5dfa277a7dca6462dcf3b52b2'. Penjual tersebut memiliki kategori produk terlaris yaitu : Auto, Watches & Gifts
, Health & Beauty, Cool Stuff, Computers Accessories, Electronics, Audio, Sports & Leisure, Telephony, Consoles & Games dengan total revenue 229472.63.

5. Berdasarkan analisis teks dari ulasan pelanggan tahun 2016-2018, komentar  yang paling sering disebut dalam ulasan yaitu kata-kata seperti "Muito bom" (Sangat baik), "Bom" (Baik), "Ã“timo" (Luar biasa), dan "Recomendo" (Saya rekomendasikan)

6. analisis RFM untuk mengidentifikasi pelanggan yang VIP, Loyal, At Risk to Churn, dan Churn berdasarkan transaksi terakhir menunjukkan bahwa:
-  VIP Customers adalah pelanggan dengan transaksi terbaru, sering berbelanja, dan memiliki nilai transaksi tinggi. Mereka harus dijaga dengan program eksklusif.
- Loyal Customers sering berbelanja tetapi mungkin tidak dalam waktu dekat. Penawaran khusus dapat meningkatkan keterlibatan mereka secara berlanjut.
- At Risk to Churn adalah pelanggan yang dulunya aktif tetapi mulai jarang berbelanja. Strategi re-engagement diperlukan untuk menarik mereka kembali.
- Churned Customers tidak bertransaksi dalam waktu lama. Promosi khusus atau diskon besar bisa menjadi cara untuk mengaktifkan mereka kembali.
- Sao Paulo dan Rio de Janeiro memiliki jumlah churn tertinggi
- Churn pada tahun 2017- 2018 cukup tinggi.
- Churn customer mendominasi dengan 59.9%, menunjukkan bahwa lebih dari setengah pelanggan telah berhenti menggunakan layanan.
""")

df = pd.read_csv('all_data.csv')
#df.head()

st.subheader('Top 10 Best Selling Products')

# Calculate product sales counts
# Ensure 'product_category_name_english' column exists in your CSV
product_sales = df.groupby('product_category_name_english')['order_id'].count().sort_values(ascending=False).head(10)

# Create the plot
fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(x=product_sales.values, y=product_sales.index, ax=ax, palette='viridis')
ax.set_xlabel('Total')
ax.set_ylabel('Product Category')
ax.set_title('Top 10 Best Selling Products')

# Display the plot in Streamlit
st.pyplot(fig)

st.subheader('Customer Segmentation & Top Cities')

col1, col2 = st.columns(2)

with col1:
    st.subheader("Top 10 Cities by Customer Count")

    # Assuming you have customer data by city in your DataFrame
    # Replace with your actual column names
    top_cities = df.groupby('customer_city')['customer_id'].count().nlargest(10).reset_index()
    top_cities.columns = ['City', 'Customer Count']

    fig, ax = plt.subplots(figsize=(8, 6))
    sns.barplot(x='Customer Count', y='City', data=top_cities, ax=ax, palette='viridis')
    ax.set_xlabel('Customer Count')
    ax.set_ylabel('City')
    ax.set_title('Top 10 Cities with Most Customers')
    st.pyplot(fig)

with col2:
    st.subheader("Customer Segmentation (RFM)")
    # Assuming you have 'customer_segment' and 'segment_count' in your DataFrame
    # Replace with your actual column names
    rfm_data = df.groupby('Segment')['customer_id'].count().reset_index()
    rfm_data.columns = ['Customer Segment', 'Count']
    fig, ax = plt.subplots(figsize=(6, 6))
    ax.pie(rfm_data['Count'], labels=rfm_data['Customer Segment'], autopct='%1.1f%%', startangle=90)
    ax.set_title('Customer Segmentation by RFM Score')
    st.pyplot(fig)

st.subheader('Trend Analysis')

col1, col2 = st.columns(2)

with col1:
    st.subheader("Monthly Transaction Trend")
    # Assuming 'order_purchase_timestamp' column contains datetime info
    df['order_purchase_timestamp'] = pd.to_datetime(df['order_purchase_timestamp'])
    df['month_year'] = df['order_purchase_timestamp'].dt.to_period('M')
    monthly_transactions = df.groupby('month_year')['order_id'].count().reset_index()
    monthly_transactions.columns = ['Month-Year', 'Transaction Count']

    # Convert 'Month-Year' to string before plotting
    monthly_transactions['Month-Year'] = monthly_transactions['Month-Year'].astype(str)

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.plot(monthly_transactions['Month-Year'], monthly_transactions['Transaction Count'], marker='o', linestyle='-')
    plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
    ax.set_xlabel('Month')
    ax.set_ylabel('Transaction Count')
    ax.set_title('Monthly Transaction Trend')
    st.pyplot(fig)

with col2:
    st.subheader("Monthly Revenue Trend")
    # Assuming you have 'payment_value' column representing revenue
    monthly_revenue = df.groupby('month_year')['price'].sum().reset_index()
    monthly_revenue.columns = ['Month-Year', 'Total Revenue']

    # Convert 'Month-Year' to string before plotting
    monthly_revenue['Month-Year'] = monthly_revenue['Month-Year'].astype(str)

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.plot(monthly_revenue['Month-Year'], monthly_revenue['Total Revenue'], marker='o', linestyle='-')
    plt.xticks(rotation=45)
    ax.set_xlabel('Month')
    ax.set_ylabel('Total Revenue')
    ax.set_title('Monthly Revenue Trend')
    st.pyplot(fig)